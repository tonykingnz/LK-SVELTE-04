{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Input.svelte"
  ],
  "sourcesContent": [
    "<script>\nimport Input from \"./Input.svelte\";\nlet inputText = \"\"\nlet storeName=[\"Apple\", \"Amazon\", \"Google\", \"Facebook\", \"Lederek\", \"Microsoft\", \"Zeferino\"];\n</script>\n\n<body>\n<h2>W3docs</h2>\n  <div class=\"scroll\">\n    Lorem Ipsum is simply dummy text of the printing and typesetting industry.\n    Lorem Ipsum has been the industry's standard dummy text ever since the 1500s when a\n    n unknown printer took a galley of type and scrambled it to make a type specimen book.\n    It has survived not only five centuries, but also the leap into electronic typesetting,\n    remaining essentially unchanged. It was popularised in the 1960s with the release of\n    Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing\n    software like Aldus PageMaker including versions of Lorem Ipsum. It is a long\n    established fact that a reader will be distracted by the readable content of a page\n    when looking at its layout. The point of using Lorem Ipsum is that it has a\n    more-or-less normal distribution of letters, as opposed to using 'Content here,\n    content here', making it look like readable English. Many desktop publishing packages\n    and web page editors now use Lorem Ipsum as their default model text, and a search\n    for 'lorem ipsum' will uncover many web sites still in their infancy.\n  </div>\n</body>\n\n<Input arrayToSearch={storeName} {inputText}/>\n\n<style>\n    .scroll {\n        background-color: #fed9ff;\n        width: 150px;\n        height: 150px;\n        overflow-x: hidden;\n        overflow-y: auto;\n        text-align: center;\n        padding: 20px;\n    }\n</style>\n",
    "<script>\n    export let placeholder = \"Write here\";\n    \t\n    \tlet autocompletion = [];\n    \texport let inputText = \"\";\n    \texport let arrayToSearch = [];\n    \t\n        setInterval(function() {\n            if (inputText != undefined && inputText != \"\") {\n                autocompletion = [];\n\n                arrayToSearch.forEach(checkAndAdd);\n                function checkAndAdd(item) {\n                    if (item.toUpperCase().includes(inputText.toUpperCase())) {\n                        autocompletion = [...autocompletion, item];\n                    }\n                }\n            } else {\n                autocompletion = [];\n            }\n        }, 500);\n        \n        let i = 0;\n    \tlet inputTextCandidate = autocompletion[0];\n        \n        function handleKey() {\n    \t    if (autocompletion.length > 0) {\n                if (event.key == \"ArrowUp\" && inputTextCandidate != autocompletion[0])  {\n    \t\t        inputTextCandidate = autocompletion[i];\n    \t\t\t    i -= 1;\n                }\n    \t\t    else if (event.key == \"ArrowDown\" && inputTextCandidate != autocompletion[autocompletion.length - 1]) {\n                    inputTextCandidate = autocompletion[i];\n    \t\t\t    i += 1;\n                }\n                else if (event.keyCode == 13){\n                    if (inputTextCandidate != undefined && inputTextCandidate != \"\"){\n                        inputText = inputTextCandidate;\n                    }\n                }\n    \t\t    return handleKey;\n            }\n        }\n</script>\n\n<body>\n    <div class=\"container\">\n        <input type=\"text\" bind:value={inputText} {placeholder}>\n        <div class=\"sugestion\">\n            {#if inputText.length > 0 && autocompletion.length < 1}\n                 <ul>\n                     <p>Not found</p>\n                </ul>\n            {:else if inputText != \"\" && autocompletion != []}\n                <ul>\n                    {#if inputTextCandidate != undefined}\n                        <p>Press enter to select: {inputTextCandidate}</p>\n                    {:else}\n                        <p>Use the arrows keys to find in the sugestions.</p>\n                    {/if}\n                    {#each autocompletion as match, i}\n                        <li on:click=\"{() => inputText = match}\">{match}</li>\n                    {/each}\n                </ul>\n            {:else}\n                <h5>Start Writing.</h5>\n            {/if}\n        </div> \n    </div>\n    <br>\n</body>\n\n<svelte:window on:keydown={handleKey} />\n\n<style>\n    ul {\n\t\tbackground-color: #eaeaea;\n        border-color: #a5a5a5;\n    \tborder: 2.5px;\n\t\tborder-style: solid;\n        border-radius: 10px;\n    \twidth: 180px;\n        height: 120px;\n        overflow-x: hidden;\n        overflow-y: auto;\n        text-align: left;\n    }\n    p {\n        text-align: left;\n        border: none;\n        color: #567987;\n    }\n    li {\n        cursor: pointer;\n    }\n    \t.container{\n      \tposition: relative;\n      }\n      .sugestion{\n        top: 18px;\n    \tz-index : 99;\n      \tposition: absolute;\n       }\n</style>\n"
  ],
  "names": [],
  "mappings": "AA4BI,OAAO,cAAC,CAAC,AACL,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,AACjB,CAAC;ACuCD,EAAE,cAAC,CAAC,AACN,gBAAgB,CAAE,OAAO,CACnB,YAAY,CAAE,OAAO,CACxB,MAAM,CAAE,KAAK,CAChB,YAAY,CAAE,KAAK,CACb,aAAa,CAAE,IAAI,CACtB,KAAK,CAAE,KAAK,CACT,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,CAChB,UAAU,CAAE,IAAI,AACpB,CAAC,AACD,CAAC,cAAC,CAAC,AACC,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,OAAO,AAClB,CAAC,AACD,EAAE,cAAC,CAAC,AACA,MAAM,CAAE,OAAO,AACnB,CAAC,AACA,wBAAU,CAAC,AACT,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACD,wBAAU,CAAC,AACT,GAAG,CAAE,IAAI,CACZ,OAAO,CAAG,EAAE,CACV,QAAQ,CAAE,QAAQ,AAClB,CAAC"
}