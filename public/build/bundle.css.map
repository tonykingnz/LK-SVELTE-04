{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Input.svelte"
  ],
  "sourcesContent": [
    "<script>\n    export let placeholder = \"Write here\";\n    \t\n    \tlet autocompletion = [];\n    \texport let inputText = \"\";\n    \texport let arrayToSearch = [];\n    \t\n    \t$: if (inputText != undefined && inputText != \"\"){\n    \t\tautocompletion = [];\n    \t\t\n    \t\tarrayToSearch.forEach(checkAndAdd);\n    \t\tfunction checkAndAdd(item){\n    \t\t\tif (item.toUpperCase().includes(inputText.toUpperCase())){\n    \t\t\t\tautocompletion = [...autocompletion, item];\n    \t\t\t}\n    \t\t}\n    \t}else {\n            debugger;\n    \t\tautocompletion = [];\n    \t}\n        \n        let i = 0;\n    \tlet inputTextCandidate = autocompletion[0];\n        \n        function handleKey() {\n    \t    if (autocompletion.length > 0) {\n                if (event.key == \"ArrowUp\" && inputTextCandidate != autocompletion[0])  {\n    \t\t        inputTextCandidate = autocompletion[i];\n    \t\t\t    i -= 1;\n                }\n    \t\t    else if (event.key == \"ArrowDown\" && inputTextCandidate != autocompletion[autocompletion.length - 1]) {\n                    inputTextCandidate = autocompletion[i];\n    \t\t\t    i += 1;\n                }\n                else if (event.keyCode == 13){\n                    if (inputTextCandidate != undefined && inputTextCandidate != \"\"){\n                        inputText = inputTextCandidate;\n                    }\n                }\n    \t\t    return handleKey;\n            }\n        }\n</script>\n\n<body>\n    <p>{inputTextCandidate}</p>\n    <div class=\"container\">\n        <input type=\"text\" bind:value={inputText} {placeholder}>\n        <div class=\"sugestion\">\n            {#if inputText.length > 0 && autocompletion.length < 1}\n                 <ul>\n                    <li>Not found</li>\n                </ul>\n            {:else if inputText != \"\" && autocompletion != []}\n                <ul>\n                    {#each autocompletion as match, i}\n                        <li on:click=\"{() => inputText = match}\">{match}</li>\n                    {/each}\n                </ul>\n            {:else}\n                <p>Start Writing.</p>\n            {/if}\n        </div> \n    </div>\n    <br>\n</body>\n\n<svelte:window on:keydown={handleKey} />\n\n<style>\n    ul {\n    \t\ttop: 100%;\n        left: 0;\n    \t\twidth: 100%;\n    \t\tbackground-color: #eaeaea;\n    \t\tborder-color: #a5a5a5;\n    \t\tborder-color: 10px;\n    \t\tborder-style: solid;\n    \t\tborder-radius: 10px;\n    \t}\n      li {\n        cursor: pointer;\n      }\n    \t.container{\n      \tposition: relative;\n      }\n      .sugestion{\n        top: 18px;\n    \tz-index : 99;\n      \tposition: absolute;\n       }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAsEI,EAAE,eAAC,CAAC,AACF,GAAG,CAAE,IAAI,CACP,IAAI,CAAE,CAAC,CACT,KAAK,CAAE,IAAI,CACX,gBAAgB,CAAE,OAAO,CACzB,YAAY,CAAE,OAAO,CACrB,YAAY,CAAE,IAAI,CAClB,YAAY,CAAE,KAAK,CACnB,aAAa,CAAE,IAAI,AACpB,CAAC,AACA,EAAE,eAAC,CAAC,AACF,MAAM,CAAE,OAAO,AACjB,CAAC,AACF,yBAAU,CAAC,AACT,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACD,yBAAU,CAAC,AACT,GAAG,CAAE,IAAI,CACZ,OAAO,CAAG,EAAE,CACV,QAAQ,CAAE,QAAQ,AAClB,CAAC"
}